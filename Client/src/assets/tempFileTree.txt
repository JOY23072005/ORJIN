import React, { useState, useRef } from 'react';
import { 
  ChevronRight, 
  ChevronDown, 
  File, 
  Folder, 
  FolderOpen,
  Plus,
  MoreHorizontal,
  Edit3,
  Trash2,
  Copy
} from 'lucide-react';
import { getFileTypeInfo, type FileTypeInfo, type FileType, type FileNode } from '../lib/utility';
import { useFileTree } from "../context/FileTreeContext";
import { useSocket } from "../context/SocketProvider";
import { useParams } from 'react-router-dom';

interface FileIconProps {
  fileName: string;
  className?: string;
}

interface FileTreeNodeProps {
  node: FileNode;
  level?: number;
  onToggle: (node: FileNode) => void;
  onSelect: (node: FileNode) => void;
  selectedId: string | null;
  onContextMenu: (e: React.MouseEvent, node: FileNode) => void;
  setCurrentFolder: (path: string | null) => void;
}

interface FileTreeProps {
  onFileSelect: (node: FileNode) => void;
}

const FileIcon: React.FC<FileIconProps> = ({ fileName, className = "" }) => {
  const fileTypeInfo: FileTypeInfo = getFileTypeInfo(fileName);
  const iconClass: string = `w-4 h-4 ${className}`;
  
  switch (fileTypeInfo.type) {
    case 'javascript':
    case 'typescript':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'css':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'html':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'json':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'markdown':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'python':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'java':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'cpp':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'csharp':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'php':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'ruby':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'go':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'rust':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'swift':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'shell':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'xml':
    case 'yaml':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'dockerfile':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'config':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'image':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'video':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'audio':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'pdf':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'archive':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    case 'text':
      return <File className={`${iconClass} ${fileTypeInfo.color}`} />;
    default:
      return <File className={`${iconClass} text-gray-500`} />;
  }
};

const FileTreeNode: React.FC<FileTreeNodeProps> = ({ 
  node, 
  level = 0, 
  onToggle, 
  onSelect, 
  selectedId, 
  onContextMenu,
  setCurrentFolder
}) => {
  const [isRenaming, setIsRenaming] = useState(false);
  const [newName, setNewName] = useState(node.name);
  const [showContextMenu, setShowContextMenu] = useState(false);
  const socket = useSocket();
  const { roomId } = useParams<{ roomId: string }>();
  const inputRef = useRef<HTMLInputElement>(null);

  const handleToggle = (e: React.MouseEvent) => {
    e.stopPropagation();
    onToggle(node);
    setCurrentFolder(node.path ?? null);
  };

  const handleSelect = () => {
    onSelect(node);
    if (node.type === 'folder') {
      setCurrentFolder(node.path ?? null);
    } else {
      setCurrentFolder(null);
    }
  };

  const handleRename = () => {
    if (newName.trim() && newName !== node.name) {
      const parent = node.path?.split('/').slice(0, -1).join('/');
      const newPath = parent ? `${parent}/${newName.trim()}` : newName.trim();
      socket.emit('file:rename', { oldPath: node.path, newPath });
    }
    setIsRenaming(false);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleRename();
    } else if (e.key === 'Escape') {
      setNewName(node.name);
      setIsRenaming(false);
    }
  };

  const handleContextMenu = (e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setShowContextMenu(true);
    onContextMenu(e, node);
  };

  const startRename = () => {
    setIsRenaming(true);
    setShowContextMenu(false);
    setTimeout(() => inputRef.current?.focus(), 0);
  };

  const handleDelete = () => {
    socket.emit('file:delete', { filePath: node.path });
    setShowContextMenu(false);
  };

  const paddingLeft = level * 16;

  return (
    <div className="relative">
      <div
        className={`flex items-center py-1 px-2 hover:bg-secondary-600/10 cursor-pointer select-none relative group ${
          selectedId === node.id ? 'bg-secondary-900/30 border-r-2 border-primary-500' : ''
        }`}
        style={{ paddingLeft: paddingLeft + 8 }}
        onClick={handleSelect}
        onContextMenu={handleContextMenu}
      >
        {node.type === 'folder' && (
          <button
            onClick={handleToggle}
            className="flex items-center justify-center w-4 h-4 mr-1 hover:bg-gray-200 rounded"
          >
            {node.isOpen ? (
              <ChevronDown className="w-3 h-3 text-gray-600" />
            ) : (
              <ChevronRight className="w-3 h-3 text-gray-600" />
            )}
          </button>
        )}
        
        {node.type === 'file' && <div className="w-4 h-4 mr-1" />}
        
        <div className="flex items-center mr-2">
          {node.type === 'folder' ? (
            node.isOpen ? (
              <FolderOpen className="w-4 h-4 text-primary-600" />
            ) : (
              <Folder className="w-4 h-4 text-primary-600" />
            )
          ) : (
            <FileIcon fileName={node.name} />
          )}
        </div>
        
        {isRenaming ? (
          <input
            ref={inputRef}
            type="text"
            value={newName}
            onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewName(e.target.value)}
            onBlur={handleRename}
            onKeyDown={handleKeyDown}
            className="flex-1 px-1 py-0.5 text-sm border border-primary-300 rounded focus:outline-none focus:ring-1 focus:ring-primary-500"
            onClick={(e: React.MouseEvent) => e.stopPropagation()}
          />
        ) : (
          <span className="flex-1 text-sm text-primary-100 truncate">{node.name}</span>
        )}
        
        {!isRenaming && (
          <button
            onClick={(e: React.MouseEvent) => {
              e.stopPropagation();
              setShowContextMenu(!showContextMenu);
            }}
            className="opacity-0 group-hover:opacity-100 p-1 hover:bg-gray-200 rounded transition-opacity"
          >
            <MoreHorizontal className="w-3 h-3 text-gray-500" />
          </button>
        )}
      </div>
      
      {showContextMenu && (
        <div 
          className="absolute top-full left-0 z-50 bg-white border border-gray-200 rounded-md shadow-lg py-1 min-w-[150px]"
          onClick={(e) => e.stopPropagation()}
        >
          <button
            onClick={startRename}
            className="flex items-center w-full px-3 py-2 text-sm text-gray-700 hover:bg-gray-100"
          >
            <Edit3 className="w-4 h-4 mr-2" />
            Rename
          </button>
          <button
            onClick={handleDelete}
            className="flex items-center w-full px-3 py-2 text-sm text-red-600 hover:bg-gray-100"
          >
            <Trash2 className="w-4 h-4 mr-2" />
            Delete
          </button>
          {node.type === 'folder' && (
            <>
              <hr className="my-1 border-gray-200" />
              <button
                onClick={() => {
                  socket.emit('file:add', { 
                    filePath: node.path ? `${node.path}/new-file.txt` : 'new-file.txt',
                    isFolder: false
                  });
                  setShowContextMenu(false);
                }}
                className="flex items-center w-full px-3 py-2 text-sm text-gray-700 hover:bg-gray-100"
              >
                <File className="w-4 h-4 mr-2" />
                New File
              </button>
              <button
                onClick={() => {
                  socket.emit('file:add', { 
                    filePath: node.path ? `${node.path}/new-folder` : 'new-folder',
                    isFolder: true
                  });
                  setShowContextMenu(false);
                }}
                className="flex items-center w-full px-3 py-2 text-sm text-gray-700 hover:bg-gray-100"
              >
                <Folder className="w-4 h-4 mr-2" />
                New Folder
              </button>
            </>
          )}
        </div>
      )}
      
      {node.children && node.isOpen && (
        <div>
          {node.children.map((child) => (
            <FileTreeNode
              key={child.id}
              node={child}
              level={level + 1}
              onToggle={onToggle}
              onSelect={onSelect}
              selectedId={selectedId}
              onContextMenu={onContextMenu}
              setCurrentFolder={setCurrentFolder}
            />
          ))}
        </div>
      )}
    </div>
  );
};

const getUniqueName = (base: string, existingNames: Set<string>, ext = ''): string => {
  if (!existingNames.has(base + ext)) return base + ext;
  let i = 1;
  while (existingNames.has(`${base} (${i})${ext}`)) {
    i++;
  }
  return `${base} (${i})${ext}`;
};

const FileTree: React.FC<FileTreeProps> = ({ onFileSelect }) => {
  const { fileTree, setFileTree } = useFileTree();
  const [selectedId, setSelectedId] = useState<string | null>(null);
  const [currentFolderPath, setCurrentFolderPath] = useState<string | null>(null);
  const socket = useSocket();

  const handleSelect = (node: FileNode) => {
    setSelectedId(node.id);
    if(node.type==="file")
    onFileSelect(node);
  };

  const handleToggle = (node: FileNode) => {
    const toggle = (nodes: FileNode[]): FileNode[] =>
      nodes.map((n) =>
        n.id === node.id
          ? { ...n, isOpen: !n.isOpen }
          : n.children
          ? { ...n, children: toggle(n.children) }
          : n
      );
    setFileTree((prev) => toggle(prev));
  };

  const handleContextMenu = (e: React.MouseEvent, node: FileNode) => {
    e.preventDefault();
    e.stopPropagation();
  };

  const handleAdd = (isFolder: boolean) => {
    const base = isFolder ? 'new-folder' : 'new-file';
    const ext = isFolder ? '' : '.txt';

    const siblings = new Set<string>();
    const collect = (nodes: FileNode[]) => {
      for (const node of nodes) {
        const parent = node.path?.split('/').slice(0, -1).join('/');
        if (parent === currentFolderPath || (!currentFolderPath && !parent)) {
          const name = node.path?.split('/').pop();
          if (name) siblings.add(name);
        }
        if (node.children) collect(node.children);
      }
    };
    collect(fileTree);

    const uniqueName = getUniqueName(base, siblings, ext);
    const fullPath = currentFolderPath ? `${currentFolderPath}/${uniqueName}` : uniqueName;

    socket.emit('file:add', { filePath: fullPath, isFolder });
  };

  return (
    <div className="h-full bg-[#181818] overflow-y-auto">
      <div className="h-10 p-3 bg-gray-800 text-secondary-500">
        <div className="flex items-center justify-between">
          <h3 className="text-sm font-medium">Files</h3>
          <div className="flex items-center space-x-1">
            <button
              onClick={() => handleAdd(false)}
              className="p-1 btn btn-secondary rounded"
              title="New File"
            >
              <File className="w-4 h-4 text-gray-600" />
            </button>
            <button
              onClick={() => handleAdd(true)}
              className="p-1 btn btn-secondary rounded"
              title="New Folder"
            >
              <Folder className="w-4 h-4 text-gray-600" />
            </button>
          </div>
        </div>
      </div>
      
      <div className="py-2">
        {fileTree.map((node) => (
          <FileTreeNode
            key={node.id}
            node={node}
            onToggle={handleToggle}
            onSelect={handleSelect}
            selectedId={selectedId}
            onContextMenu={handleContextMenu}
            setCurrentFolder={setCurrentFolderPath}
          />
        ))}
      </div>
    </div>
  );
};

export default FileTree;